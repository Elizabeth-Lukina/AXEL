from telebot import types

from daily_report import schedule_reports
from quote import get_quote
from weather import get_weather
from currency import get_currency
from analytics import log_usage, get_stats, get_city_chart
from database import save_user, user_exists, set_state, get_state, clear_state, update_user_time


def register_handlers(bot):
    def send_main_menu(chat_id, text):
        markup = types.InlineKeyboardMarkup()
        buttons = [
            types.InlineKeyboardButton("–ü–æ–≥–æ–¥–∞", callback_data="weather"),
            types.InlineKeyboardButton("–ú—ã—Å–ª—å –¥–Ω—è", callback_data="thought"),
            types.InlineKeyboardButton("–ö—É—Ä—Å –≤–∞–ª—é—Ç", callback_data="currency"),
            types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –¥–µ–ª–æ", callback_data="add_task"),
            types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="set_time")
        ]
        for button in buttons:
            markup.add(button)
        bot.send_message(chat_id, text, reply_markup=markup)

    @bot.message_handler(commands=["start"])
    def start(message):
        chat_id = message.chat.id
        if not user_exists(chat_id):
            bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç ‚úå –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç! –ù–∞–ø–∏—à–∏ –≥–æ—Ä–æ–¥ –æ—Ç–∫—É–¥–∞ —Ç—ã")
            set_state(chat_id, "awaiting_city")
        else:
            send_main_menu(chat_id, "–Ø —Ç–µ–±—è –∑–∞–ø–æ–º–Ω–∏–ª. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:")

    @bot.message_handler(func=lambda m: get_state(m.chat.id) == "awaiting_city")
    def save_city(message):
        print("[DEBUG] –°—Ä–∞–±–æ—Ç–∞–ª save_city")
        city = message.text.strip()
        save_user(message.chat.id, city)
        print(f"[DEBUG] –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≥–æ—Ä–æ–¥: {city}")
        clear_state(message.chat.id)
        print("[DEBUG] –°–±—Ä–æ—Å–∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        bot.send_message(message.chat.id,
                         f"–û—Ç–ª–∏—á–Ω–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —Ç–≤–æ–π –≥–æ—Ä–æ–¥: {city}.\n–¢–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 07:30 –ø–æ –ú–°–ö —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Å–≤–æ–¥–∫—É.")
        send_main_menu(message.chat.id, "–ß–µ–º –∑–∞–π–º—ë–º—Å—è?")

    @bot.message_handler(func=lambda m: get_state(m.chat.id) == "awaiting_weather_city")
    def handle_weather_city(message):
        weather = get_weather(message.text)
        clear_state(message.chat.id)
        bot.send_message(message.chat.id, weather)
        send_main_menu(message.chat.id, "–í–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑. –ß—Ç–æ –¥–∞–ª—å—à–µ?")

    @bot.callback_query_handler(func=lambda call: True)
    def callback_handler(call):
        chat_id = call.message.chat.id
        data = call.data
        log_usage(chat_id, f"callback:{data}")
        bot.answer_callback_query(call.id)  # ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–ï–ù –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫

        actions = {
            "weather": lambda: (
                set_state(chat_id, "awaiting_weather_city"),
                bot.send_message(chat_id, "–í–≤–µ–¥–∏ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:")
            ),
            "currency": lambda: bot.send_message(chat_id, get_currency()),
            "thought": lambda: bot.send_message(chat_id, get_quote()),
            "add_task": lambda: bot.send_message(chat_id, "–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üõ†"),
            "set_time": lambda: (
                set_state(chat_id, "awaiting_time"),
                bot.send_message(chat_id,
                                 "–í–æ —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É—Ç—Ä–µ–Ω–Ω—é—é —Å–≤–æ–¥–∫—É? –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 08:15.")
            )
        }

        if data in actions:
            actions[data]()

    @bot.message_handler(commands=["stats"])
    def stats(message):
        log_usage(message.chat.id, "/stats")
        stats_text = get_stats(message.chat.id)
        bot.send_message(message.chat.id, stats_text)

    @bot.message_handler(commands=["chart"])
    def chart(message):
        log_usage(message.chat.id, "/chart")
        chart_path = get_city_chart()
        with open(chart_path, 'rb') as photo:
            bot.send_photo(message.chat.id, photo)

    @bot.message_handler(commands=["set_time"])
    def ask_send_time(message):
        bot.send_message(message.chat.id,
                         "–í–æ —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É—Ç—Ä–µ–Ω–Ω—é—é —Å–≤–æ–¥–∫—É? –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 08:15.")
        set_state(message.chat.id, "awaiting_time")

    @bot.message_handler(func=lambda m: get_state(m.chat.id) == "awaiting_time")
    def save_send_time(message):
        try:
            time_str = message.text.strip()
            hour, minute = map(int, time_str.split(":"))

            if 0 <= hour < 24 and 0 <= minute < 60:
                update_user_time(message.chat.id, hour, minute)
                clear_state(message.chat.id)
                bot.send_message(message.chat.id, f"–ì–æ—Ç–æ–≤–æ! –°–≤–æ–¥–∫–∞ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ {hour:02}:{minute:02}.")
            else:
                raise ValueError
        except:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä 07:30")

    # @bot.message_handler(commands=['my_stats'])
    # def my_stats(message):
    #     log_usage(message.chat.id, '/my_stats')
    #     stats_text = get_task_stats(message.chat.id)
    #     bot.send_message(message.chat.id, stats_text)

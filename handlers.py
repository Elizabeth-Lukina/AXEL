from telebot import types
from ai_module import ai_reply

from daily_report import schedule_report_for_user
from quote import get_quote
from weather import get_weather
from currency import get_currency
from config import ADMIN_CHAT_ID
from analytics import log_usage, get_stats, get_city_chart
from database import save_user, user_exists, set_state, get_state, clear_state, update_user_time, connect, save_feedback


def register_handlers(bot):
    def get_main_menu():
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row(
            types.KeyboardButton("üå§ –ü–æ–≥–æ–¥–∞"),
            types.KeyboardButton("üí± –ö—É—Ä—Å –≤–∞–ª—é—Ç")
        )
        markup.row(
            types.KeyboardButton("üß† –ú—ã—Å–ª—å –¥–Ω—è"),
            types.KeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –¥–µ–ª–æ")
        )
        markup.row(
            types.KeyboardButton("‚è∞ –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏"),
            types.KeyboardButton("üì¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
        )
        return markup

    @bot.message_handler(commands=["start"])
    def start(message):
        chat_id = message.chat.id
        if not user_exists(chat_id):
            bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç ‚úå –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç! –ù–∞–ø–∏—à–∏ –≥–æ—Ä–æ–¥ –æ—Ç–∫—É–¥–∞ —Ç—ã")
            set_state(chat_id, "awaiting_city")
        else:
            bot.send_message(chat_id, "–Ø —Ç–µ–±—è –∑–∞–ø–æ–º–Ω–∏–ª. –ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=get_main_menu())

    @bot.message_handler(func=lambda m: get_state(m.chat.id) == "awaiting_city")
    def save_city(message):
        city = message.text.strip()
        save_user(message.chat.id, city)
        clear_state(message.chat.id)
        bot.send_message(message.chat.id,
                         f"–û—Ç–ª–∏—á–Ω–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª —Ç–≤–æ–π –≥–æ—Ä–æ–¥: {city}.\n–¢–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Å–≤–æ–¥–∫—É.",
                         reply_markup=get_main_menu())

    @bot.message_handler(func=lambda m: get_state(m.chat.id) == "awaiting_weather_city")
    def handle_weather_city(message):
        weather = get_weather(message.text)
        clear_state(message.chat.id)
        bot.send_message(message.chat.id, weather, reply_markup=get_main_menu())

    @bot.message_handler(func=lambda m: get_state(m.chat.id) == "awaiting_time")
    def save_send_time(message):
        try:
            time_str = message.text.strip()
            hour, minute = map(int, time_str.split(":"))

            if 0 <= hour < 24 and 0 <= minute < 60:
                update_user_time(message.chat.id, hour, minute)
                clear_state(message.chat.id)
                schedule_report_for_user(message.chat.id)
                bot.send_message(message.chat.id, f"–ì–æ—Ç–æ–≤–æ! –°–≤–æ–¥–∫–∞ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ {hour:02}:{minute:02}.",
                                 reply_markup=get_main_menu())
            else:
                raise ValueError
        except:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä 07:30",
                             reply_markup=get_main_menu())

    @bot.message_handler(func=lambda m: get_state(m.chat.id) == "awaiting_feedback")
    def feedback_received(message):
        clear_state(message.chat.id)
        username = message.from_user.username or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–¥–µ—é! –Ø –ø–µ—Ä–µ–¥–∞–ª –µ—ë —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        save_feedback(message.chat.id, username, message.text)

        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É
        feedback_text = f"–ù–æ–≤–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç @{username} ({message.chat.id}):\n\n{message.text}"
        bot.send_message(ADMIN_CHAT_ID, feedback_text)

    @bot.message_handler(content_types=["text"])
    def text_handler(message):
        text = message.text.strip()
        chat_id = message.chat.id
        print(f"[DEBUG] message.text = {repr(text)}")

        actions = {
            "üå§ –ü–æ–≥–æ–¥–∞": lambda: (set_state(chat_id, "awaiting_weather_city"),
                                 bot.send_message(chat_id, "–í–≤–µ–¥–∏ –≥–æ—Ä–æ–¥:")),
            "üß† –ú—ã—Å–ª—å –¥–Ω—è": lambda: bot.send_message(chat_id, get_quote(), reply_markup=get_main_menu()),
            "üí± –ö—É—Ä—Å –≤–∞–ª—é—Ç": lambda: bot.send_message(chat_id, get_currency(), reply_markup=get_main_menu()),
            "üìù –î–æ–±–∞–≤–∏—Ç—å –¥–µ–ª–æ": lambda: bot.send_message(chat_id, "–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üö∞",
                                                        reply_markup=get_main_menu()),
            "‚è∞ –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏": lambda: (set_state(chat_id, "awaiting_time"),
                                         bot.send_message(chat_id, "–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú",
                                                          reply_markup=get_main_menu())),
            "üì¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å": lambda: (set_state(chat_id, "awaiting_feedback"),
                                         bot.send_message(chat_id,
                                                          "‚úâ –ù–∞–ø–∏—à–∏, —á—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª —É–ª—É—á—à–∏—Ç—å –≤ –±–æ—Ç–µ. –Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—é!"))
        }

        if get_state(chat_id) == "awaiting_feedback":
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            clear_state(chat_id)
            username = message.from_user.username or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–¥–µ—é! –Ø –ø–µ—Ä–µ–¥–∞–ª –µ—ë —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É")
            save_feedback(chat_id, username, text)
            bot.send_message(ADMIN_CHAT_ID, f"–ù–æ–≤–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç @{username} ({chat_id}):\n\n{text}")
            return None

        if text in actions:
            actions[text]()
        else:
            if get_state(chat_id) is None:
                bot.send_chat_action(chat_id, 'typing')
                answer = ai_reply(text)
                bot.send_message(chat_id, answer, reply_markup=get_main_menu())


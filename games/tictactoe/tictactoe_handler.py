from telebot import types
from .tictactoe_logic import QLearningAgent, available_moves, make_move, check_winner, is_draw, render_board
agent = QLearningAgent.load("games/tictactoe/agent.pkl")
games = {}  # user_id -> state

def make_board_buttons(state):
    kb = types.InlineKeyboardMarkup()
    buttons = []
    for i, v in enumerate(state):
        if v == 0:
            buttons.append(types.InlineKeyboardButton(text="¬∑", callback_data=str(i)))
        else:
            text = "X" if v == 1 else "O"
            buttons.append(types.InlineKeyboardButton(text=text, callback_data="noop"))
    for r in range(3):
        kb.row(*buttons[3*r:3*r+3])
    return kb

def register_games_handlers(bot, agent: QLearningAgent):
    @bot.message_handler(func=lambda m: m.text == "üé≤ –ü–æ–∏–≥—Ä–∞–µ–º?")
    def start_game(msg):
        user_id = msg.from_user.id
        games[user_id] = (0,)*9
        bot.send_message(
            user_id,
            "–ò–≥—Ä–∞ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏! –¢—ã X.\n–í—ã–±–µ—Ä–∏ –∫–ª–µ—Ç–∫—É:",
            reply_markup=make_board_buttons(games[user_id])
        )

    @bot.callback_query_handler(func=lambda c: True)
    def process_move(query):
        user_id = query.from_user.id
        if user_id not in games:
            bot.answer_callback_query(query.id, "–ù–∞—á–Ω–∏ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /tictactoe")
            return
        state = games[user_id]
        if query.data == "noop":
            bot.answer_callback_query(query.id, "–ö–ª–µ—Ç–∫–∞ –∑–∞–Ω—è—Ç–∞!")
            return
        idx = int(query.data)
        # –•–æ–¥ —á–µ–ª–æ–≤–µ–∫–∞
        state = make_move(state, idx, 1)
        winner = check_winner(state)
        if winner:
            bot.edit_message_text(f"–¢—ã –≤—ã–∏–≥—Ä–∞–ª!\n\n{render_board(state)}",
                                  user_id, query.message.message_id)
            del games[user_id]
            return
        if is_draw(state):
            bot.edit_message_text(f"–ù–∏—á—å—è!\n\n{render_board(state)}",
                                  user_id, query.message.message_id)
            del games[user_id]
            return
        # –•–æ–¥ –±–æ—Ç–∞
        bot_action = agent.best_action(state)
        state = make_move(state, bot_action, 2)
        winner = check_winner(state)
        if winner:
            bot.edit_message_text(f"AXEL –ø–æ–±–µ–¥–∏–ª!\n\n{render_board(state)}",
                                  user_id, query.message.message_id)
            del games[user_id]
            return
        if is_draw(state):
            bot.edit_message_text(f"–ù–∏—á—å—è!\n\n{render_board(state)}",
                                  user_id, query.message.message_id)
            del games[user_id]
            return
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É
        games[user_id] = state
        bot.edit_message_text("–¢–≤–æ–π —Ö–æ–¥:", user_id, query.message.message_id,
                              reply_markup=make_board_buttons(state))

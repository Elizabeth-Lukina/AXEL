from telebot import types

from services.daily_report import schedule_report_for_user
from db.queries import user_exists, set_state, get_state, save_preferences, get_preferences, update_user_time, \
    clear_state
from ui.ui import get_main_menu, get_subscription_items_keyboard, get_yes_no_keyboard


def register_handlers_start(bot):
    @bot.message_handler(commands=["start"])
    def start(message):
        chat_id = message.chat.id
        username = message.from_user.username or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        if not user_exists(chat_id):
            bot.send_message(chat_id, f" ‚úå –ô–æ—É, –π–æ—É, –π–æ—É! –ü—Ä–∏–≤–µ—Ç, {username}!\n"
                                      f"–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ‚Äî AXIOM!\n"
                                      f"–¢–æ—á–Ω–µ–µ –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ —É—á—É—Å—å –∏–º –±—ã—Ç—å, –Ω–æ –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –±—ã—Ç—å —É–∂–µ –ø–æ–ª–µ–∑–Ω—ã–º.")

            bot.send_message(chat_id, "–•–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É—Ç—Ä–µ–Ω–Ω—é—é —Ä–∞—Å—Å—ã–ª–∫—É?", reply_markup=get_yes_no_keyboard())
            set_state(chat_id, "awaiting_subscription_choice")
        else:
            bot.send_message(chat_id, "–ú—ã –∂–µ —É–∂–µ –∑–Ω–∞–∫–æ–º—ã, —á–µ–º –∑–∞–π–º–µ–º—Å—è?", reply_markup=get_main_menu())

    @bot.message_handler(func=lambda message: get_state(message.chat.id) == "awaiting_subscription_choice")
    def handle_subscription_choice(message):
        chat_id = message.chat.id
        text = message.text.strip()

        if text == "‚úÖ –î–∞":
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –≤ —Ä–∞—Å—Å—ã–ª–∫–µ:",
                             reply_markup=get_subscription_items_keyboard())
            set_state(chat_id, "awaiting_subscription_items")

        elif text == "‚ùå –ù–µ—Ç":
            save_preferences(chat_id, [])
            bot.send_message(chat_id, "–ü–æ–Ω—è–ª, –∑–Ω–∞—á–∏—Ç –Ω–µ —Ö–æ—á–µ—à—å.", reply_markup=types.ReplyKeyboardRemove())
            clear_state(chat_id)
            bot.send_message(chat_id, "–¢–æ–≥–¥–∞, —á–µ–º –∑–∞–π–º–µ–º—Å—è?", reply_markup=get_main_menu())

        else:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ ¬´‚úÖ –î–∞¬ª –∏–ª–∏ ¬´‚ùå –ù–µ—Ç¬ª.")

    @bot.message_handler(func=lambda message: get_state(message.chat.id) == "awaiting_subscription_items")
    def handle_subscription_items(message):
        chat_id = message.chat.id
        text = message.text.strip()

        # –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å –∏–∫–æ–Ω–∫–∞–º–∏
        valid_items = {
            "üå§ –ü–æ–≥–æ–¥–∞": "–ü–æ–≥–æ–¥–∞",
            "üí± –ö—É—Ä—Å –≤–∞–ª—é—Ç": "–ö—É—Ä—Å –≤–∞–ª—é—Ç",
            "üß† –ú—ã—Å–ª—å –¥–Ω—è": "–ú—ã—Å–ª—å –¥–Ω—è"
        }

        prefs = get_preferences(chat_id) or []

        if text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
            if not prefs:
                bot.send_message(chat_id, "–¢—ã –Ω–µ –≤—ã–±—Ä–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.",
                                 reply_markup=get_subscription_items_keyboard())
                return

            bot.send_message(chat_id, f"–û—Ç–ª–∏—á–Ω–æ! –¢—ã –≤—ã–±—Ä–∞–ª: {', '.join(prefs)}.",
                             reply_markup=types.ReplyKeyboardRemove())
            bot.send_message(chat_id, "–ö–æ–≥–¥–∞ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É? –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
            set_state(chat_id, "awaiting_time_start")
            return

        if text in valid_items:
            value = valid_items[text]

            if value not in prefs:
                prefs.append(value)
                save_preferences(chat_id, prefs)

            if value == "–ü–æ–≥–æ–¥–∞":
                bot.send_message(chat_id, "üå¶ –î–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã —É–∫–∞–∂–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥:")
                set_state(chat_id, "awaiting_city")
                return

            bot.send_message(chat_id, f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {value}. –í—ã–±–∏—Ä–∞–π –¥–∞–ª—å—à–µ –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´‚úÖ –ì–æ—Ç–æ–≤–æ¬ª",
                             reply_markup=get_subscription_items_keyboard())
        else:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´‚úÖ –ì–æ—Ç–æ–≤–æ¬ª",
                             reply_markup=get_subscription_items_keyboard())

    @bot.message_handler(func=lambda m: get_state(m.chat.id) == "awaiting_time_start")
    def save_send_time(message):
        chat_id = message.chat.id
        try:
            time_str = message.text.strip()
            hour, minute = map(int, time_str.split(":"))

            if 0 <= hour < 24 and 0 <= minute < 60:
                update_user_time(chat_id, hour, minute)
                prefs = get_preferences(chat_id) or []
                clear_state(chat_id)
                schedule_report_for_user(bot, chat_id)

                prefs_str = ", ".join(prefs)
                bot.send_message(chat_id,
                                 f"üéâ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n"
                                 f"–¢—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å: {prefs_str}.\n"
                                 f"üïí –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {hour:02}:{minute:02}.",
                                 reply_markup=get_main_menu())
            else:
                raise ValueError
        except ValueError:
            bot.send_message(chat_id,
                             "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä 07:30",
                             reply_markup=get_main_menu())

from telebot import types
from db.queries import (
    set_state, get_state, clear_state,
    add_task, get_tasks
)
from ui.ui import get_main_menu
from handlers.nlp_task_handler import handle_free_text


def register_task_handlers(bot, parse_intent):

    # –ö–Ω–æ–ø–∫–∞: "üìù –î–æ–±–∞–≤–∏—Ç—å –¥–µ–ª–æ"
    @bot.message_handler(func=lambda m: m.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –¥–µ–ª–æ")
    def ask_task_text(message):
        chat_id = message.chat.id
        set_state(chat_id, "awaiting_task_text")
        bot.send_message(chat_id, "‚úçÔ∏è –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:")

    # –ö–Ω–æ–ø–∫–∞: "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏"
    @bot.message_handler(func=lambda m: m.text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
    def show_tasks(message):
        chat_id = message.chat.id
        clear_state(chat_id)
        tasks = get_tasks(chat_id)
        if tasks:
            text = "üóÇ *–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:*\n" + "\n".join([f"‚Ä¢ {t}" for t in tasks])
        else:
            text = "üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á."
        bot.send_message(chat_id, text, parse_mode="Markdown", reply_markup=get_main_menu())

    # –°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
    @bot.message_handler(func=lambda m: get_state(m.chat.id) == "awaiting_task_text")
    def save_task(message):
        chat_id = message.chat.id
        task_text = message.text.strip()
        print(f"[DEBUG] save_task called with task_text: '{task_text}'")

        if not task_text:
            bot.send_message(chat_id, "‚ö†Ô∏è –ü—É—Å—Ç–∞—è –∑–∞–¥–∞—á–∞? –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Å–Ω–æ–≤–∞.")
            return

        try:
            print("[DEBUG] –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –ë–î")
            add_task(chat_id, task_text)
            print("[DEBUG] –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ë–î")
            clear_state(chat_id)
            bot.send_message(chat_id, f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ¬´{task_text}¬ª", reply_markup=get_main_menu())
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
            bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")

    # # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî NLP
    # @bot.message_handler(func=lambda m: True)
    # def handle_any_text(message):
    #     user_id = message.chat.id
    #     user_text = message.text.strip()
    #     print(f"[DEBUG] handle_any_text: '{user_text}'")
    #
    #     try:
    #         result = parse_intent(user_text)
    #         intent = result.get("intent")
    #         entities = result.get("entities", {})
    #
    #         print(f"[DEBUG] parse_intent: '{user_text}' ‚Üí intent: {intent}, entities: {entities}")
    #
    #         if intent == "add_task":
    #             task_text = entities.get("task") or user_text
    #             add_task(user_id, task_text)
    #             bot.send_message(user_id, f"üÜï –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ¬´{task_text}¬ª", reply_markup=get_main_menu())
    #
    #         elif intent == "list_tasks":
    #             tasks = get_tasks(user_id)
    #             if tasks:
    #                 text = "üóÇ *–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:*\n" + "\n".join([f"‚Ä¢ {t}" for t in tasks])
    #             else:
    #                 text = "üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á."
    #             bot.send_message(user_id, text, parse_mode="Markdown", reply_markup=get_main_menu())
    #
    #         else:
    #             print("[DEBUG] –ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –∏–Ω—Ç–µ–Ω—Ç ‚Äî –ø–µ—Ä–µ–¥–∞—ë–º –≤ NLP-—Ö–µ–Ω–¥–ª–µ—Ä")
    #             handle_free_text(bot, message, user_id)
    #
    #     except Exception as e:
    #         print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ NLP-–∞–Ω–∞–ª–∏–∑–µ: {e}")
    #         handle_free_text(bot, message, user_id)

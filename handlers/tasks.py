from db.queries import (
    add_task, delete_task, reschedule_task,
    get_tasks, get_tasks_by_date, mark_done
)
from db.queries import set_state, get_state, clear_state


def register_task_handlers(bot, parse_intent):
    @bot.message_handler(func=lambda m: m.text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
    def enter_task_mode(message):
        chat_id = message.chat.id
        set_state(chat_id, "awaiting_task_text")
        bot.send_message(chat_id, "üìù –í–≤–µ–¥–∏ –∑–∞–¥–∞—á—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É –∫—É–ø–∏—Ç—å —Ö–ª–µ–± –∑–∞–≤—Ç—Ä–∞¬ª):")

    @bot.message_handler(func=lambda m: get_state(m.chat.id) == "awaiting_task_text")
    def handle_task_commands(message):
        chat_id = message.chat.id
        user_text = message.text.strip()

        try:
            result = parse_intent(user_text)
            intent = result.get("intent")
            task_text = result.get("task", "")
            date = result.get("date")

            if intent == "add_task":
                add_task(chat_id, task_text, intent, date)
                bot.send_message(chat_id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: ¬´{task_text}¬ª")

            elif intent == "delete_task":
                success = delete_task(chat_id, task_text)
                msg = f"‚ùå –£–¥–∞–ª–µ–Ω–∞: ¬´{task_text}¬ª" if success else "‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
                bot.send_message(chat_id, msg)

            elif intent == "reschedule_task":
                success = reschedule_task(chat_id, task_text, date)
                msg = f"üîÅ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ {date.date()}" if success else "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–¥–∞—á—É."
                bot.send_message(chat_id, msg)

            elif intent == "list_tasks":
                rows = get_tasks(chat_id)
                clear_state(chat_id)

                if rows:
                    header = "üìã –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n\n"
                    table = "ID | –ó–∞–¥–∞—á–∞ | –°–æ–∑–¥–∞–Ω–∞ | –°—Ä–æ–∫ | –°—Ç–∞—Ç—É—Å\n"
                    table += "-" * 45 + "\n"
                    for row in rows:
                        id, task, created_at, due_date, is_done = row
                        status = "‚úÖ" if is_done else "‚ùå"
                        due = due_date if due_date else "‚Äî"
                        table += f"{id} | {task} | {created_at[:10]} | {due} | {status}\n"
                    bot.send_message(chat_id, header + f"```\n{table}```", parse_mode="Markdown")
                else:
                    bot.send_message(chat_id, "üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")

            elif intent == "mark_done":
                task_id = int(result.get("task", "").strip())
                success = mark_done(chat_id, task_id)
                msg = f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è" if success else "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É."
                bot.send_message(chat_id, msg)


            else:
                bot.send_message(chat_id, "ü§î –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

            clear_state(chat_id)

        except Exception as e:
            print(f"[ERROR] {e}")
            bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")

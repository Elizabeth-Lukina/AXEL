from telebot import types
from db.queries import (
    add_task, delete_task, reschedule_task,
    get_tasks, mark_task_completed
)
from db.queries import set_state, get_state, clear_state
from tabulate import tabulate


def register_task_handlers(bot, parse_intent):
    @bot.message_handler(func=lambda m: m.text == "üìã –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫")
    def enter_task_mode(message):
        chat_id = message.chat.id
        set_state(chat_id, "awaiting_task_text")
        bot.send_message(chat_id, "–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ —Ä–µ–∂–∏–º–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?")

    @bot.message_handler(func=lambda m: get_state(m.chat.id) == "awaiting_task_text")
    def handle_task_commands(message):
        chat_id = message.chat.id
        user_text = message.text.strip()

        try:
            result = parse_intent(user_text)
            intent = result.get("intent")
            task_text = result.get("task", "")
            date = result.get("date")

            if intent == "add_task":
                add_task(chat_id, task_text, intent, date)
                bot.send_message(chat_id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: ¬´{task_text}¬ª")

            elif intent == "delete_task":
                success = delete_task(chat_id, task_text)
                bot.send_message(chat_id, f"‚ùå –£–¥–∞–ª–µ–Ω–∞: ¬´{task_text}¬ª" if success else "‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

            elif intent == "reschedule_task":
                success = reschedule_task(chat_id, task_text, date)
                bot.send_message(chat_id, f"üîÅ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ {date.date()}" if success else "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏.")

            elif intent == "list_tasks":
                send_task_list(bot, chat_id)

            elif intent == "mark_task_completed":
                task_id = int(result.get("task", "").strip())
                success = mark_task_completed(chat_id, task_id)
                bot.send_message(chat_id,
                                 f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è" if success else "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å.")

            else:
                bot.send_message(chat_id, "ü§î –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

        except Exception as e:
            print(f"[ERROR] {e}")
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")

        finally:
            clear_state(chat_id)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("complete:"))
    def handle_complete_task(call):
        task_id = int(call.data.split(":")[1])
        chat_id = call.message.chat.id

        if mark_task_completed(chat_id, task_id):
            bot.answer_callback_query(call.id, "‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
            send_task_list(bot, chat_id, edit=True, message_id=call.message.message_id)
        else:
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("delete:"))
    def handle_delete_task(call):
        task_id = int(call.data.split(":")[1])
        chat_id = call.message.chat.id

        if delete_task(chat_id, str(task_id)):
            bot.answer_callback_query(call.id, "üóë –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.")
            send_task_list(bot, chat_id, edit=True, message_id=call.message.message_id)
        else:
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("list_tasks"))
    def send_task_list(bot, chat_id, edit=False, message_id=None):
        tasks = get_tasks(chat_id)
        if not tasks:
            if edit:
                bot.edit_message_text("üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.", chat_id, message_id)
            else:
                bot.send_message(chat_id, "üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
        headers = ["ID", "–ó–∞–¥–∞—á–∞", "–°–æ–∑–¥–∞–Ω–∞", "–°—Ä–æ–∫", "–°—Ç–∞—Ç—É—Å"]
        rows = []
        for task_id, task_text, created_at, due_date, is_done in tasks:
            status = "‚úÖ" if is_done else "‚ùå"
            created_str = created_at.split(" ")[0] if created_at else "‚Äî"
            due_str = due_date if due_date else "‚Äî"
            rows.append([task_id, task_text[:30], created_str, due_str, status])

        table_text = tabulate(rows, headers, tablefmt="plain", stralign="center")

        text = "üìã *–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:*\n```\n" + table_text + "\n```"

        markup = types.InlineKeyboardMarkup()
        for task_id, _, _, _, is_done in tasks:
            row = []
            if not is_done:
                row.append(types.InlineKeyboardButton(callback_data=f"complete:{task_id}", text=f"{task_id} - ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞"))
            row.append(types.InlineKeyboardButton(callback_data=f"delete:{task_id}", text=f"{task_id} - üóë –£–¥–∞–ª–∏—Ç—å"))
            markup.add(*row)

        if edit:
            bot.edit_message_text(text, chat_id, message_id, parse_mode="Markdown", reply_markup=markup)
        else:
            bot.send_message(chat_id, text, parse_mode="Markdown", reply_markup=markup)
